import warnings
warnings.filterwarnings("ignore")
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import gridspec

PATH = "./data/contextual_summaries/"
FILE_Test='testing.csv'
df_test=pd.read_csv(PATH+FILE_Test)
df_cdf = pd.DataFrame(columns=['Feature','Label','X','Y'])
df_temp = pd.DataFrame(columns=['Feature','Label','X','Y'])
n_bins = 100
color_apt = 'r'
color_botnet = 'blueviolet'
color_legitimate = 'royalblue'

def attach_df(_n,_bins,_df_cdf,_LABEL,_FEATURE):
    df_temp = pd.DataFrame(columns=['Feature', 'Label', 'X', 'Y'])
    df_temp['X'] = pd.Series(_bins)
    df_temp['Y'] = pd.Series(_n)
    df_temp['Label'] = df_temp.Label.fillna(_LABEL)
    df_temp['Feature'] = _FEATURE
    return _df_cdf.append(df_temp, ignore_index=True)

def view_cdf(_FEATURE,_minY ,_maxY):
    return df_cdf.loc[(df_cdf.Feature==_FEATURE) &
                      (df_cdf.Y<=_maxY) &
                      (df_cdf.Y>=_minY)]



plt.figure(figsize=(18, 2.5))
fig = gridspec.GridSpec(1, 8)
ax= plt.subplot(fig[0])
plt.rcParams['font.family'] = "serif"
n, bins, patches = ax.hist(df_test[df_test.capture_type=="APT"].HP_MTDSC, n_bins, range=[0, 110], density=True, histtype='step',
                           cumulative=True, label='APT',linewidth=2,color=color_apt)
df_cdf['X']=pd.Series(bins)
df_cdf['Y']=pd.Series(n)
df_cdf['Label']=df_cdf.Label.fillna("APT")
df_cdf['Feature']="HP_MTDSC"
n, bins, patches = ax.hist(df_test[df_test.capture_type=="botnet"].HP_MTDSC, n_bins,range=[0, 110], density=True, histtype='step',
                           cumulative=True, label='botnet',linewidth=2,color=color_botnet)
df_cdf=attach_df(n,bins,df_cdf,"botnet","HP_MTDSC")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="legitimate"].HP_MTDSC, n_bins,range=[0, 110], density=True, histtype='step',
                           cumulative=True, label='legitimate',linewidth=2,color=color_legitimate)
df_cdf=attach_df(n,bins,df_cdf,"legitimate","HP_MTDSC")
major_ticks_x = np.arange(0, 111, 50)
minor_ticks_x = np.arange(0, 111, 50/5)
major_ticks_y = np.arange(0, 1.1, 0.2)
minor_ticks_y = np.arange(0, 1.1, 0.05)
ax.set_xticks(major_ticks_x)
ax.set_xticks(minor_ticks_x, minor=True)
ax.set_yticks(major_ticks_y)
ax.set_yticks(minor_ticks_y, minor=True)
ax.grid(which='minor', alpha=0.3)
ax.grid(which='major', alpha=0.5)
ax.set_xlabel('MTDSC', fontsize=13)
ax.set_ylabel('CDF', fontsize=13)
plt.rc('xtick', labelsize=13)
plt.rc('ytick', labelsize=13)

ax= plt.subplot(fig[1])
plt.rcParams['font.family'] = "serif"
color_apt = 'r'
color_botnet = 'blueviolet'
color_legitimate = 'royalblue'
n, bins, patches = ax.hist(df_test[df_test.capture_type=="APT"].HP_dnsReq_perflow, n_bins, range=[0, 20], density=True, histtype='step',
                           cumulative=True, label='APT',linewidth=2,color=color_apt)
df_cdf=attach_df(n,bins,df_cdf,"APT","HP_dnsReq_perflow")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="botnet"].HP_dnsReq_perflow, n_bins,range=[0, 20], density=True, histtype='step',
                           cumulative=True, label='botnet',linewidth=2,color=color_botnet)
df_cdf=attach_df(n,bins,df_cdf,"botnet","HP_dnsReq_perflow")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="legitimate"].HP_dnsReq_perflow, n_bins,range=[0, 20], density=True, histtype='step',
                           cumulative=True, label='legitimate',linewidth=2,color=color_legitimate)
df_cdf=attach_df(n,bins,df_cdf,"legitimate","HP_dnsReq_perflow")
major_ticks_x = np.arange(0, 21, 10)
minor_ticks_x = np.arange(0, 21, 2)
major_ticks_y = np.arange(0, 1.1, 0.2)
minor_ticks_y = np.arange(0, 1.1, 0.05)
ax.set_xticks(major_ticks_x)
ax.set_xticks(minor_ticks_x, minor=True)
ax.set_yticks(major_ticks_y)
ax.set_yticks(minor_ticks_y, minor=True)
ax.grid(which='minor', alpha=0.3)
ax.grid(which='major', alpha=0.5)
ax.set_xlabel('DNS Request\n per Host', fontsize=13)
plt.rc('xtick', labelsize=13)
plt.rc('ytick', labelsize=13)

ax= plt.subplot(fig[2])
plt.rcParams['font.family'] = "serif"
n, bins, patches = ax.hist(df_test[df_test.capture_type=="APT"].HP_DestByIP, n_bins, range=[0, df_test.HP_DestByIP.max()], density=True, histtype='step',
                           cumulative=True, label='APT',linewidth=2,color=color_apt)
df_cdf=attach_df(n,bins,df_cdf,"APT","HP_DestByIP")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="botnet"].HP_DestByIP, n_bins,range=[0, df_test.HP_DestByIP.max()], density=True, histtype='step',
                           cumulative=True, label='botnet',linewidth=2,color=color_botnet)
df_cdf=attach_df(n,bins,df_cdf,"botnet","HP_DestByIP")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="legitimate"].HP_DestByIP, n_bins,range=[0, df_test.HP_DestByIP.max()], density=True, histtype='step',
                           cumulative=True, label='legitimate',linewidth=2,color=color_legitimate)
df_cdf=attach_df(n,bins,df_cdf,"legitimate","HP_DestByIP")
major_ticks_x = np.arange(0, 1.1, 0.5)
minor_ticks_x = np.arange(0, 1.1, 0.5/5)
major_ticks_y = np.arange(0, 1.1, 0.2)
minor_ticks_y = np.arange(0, 1.1, 0.05)
ax.set_xticks(major_ticks_x)
ax.set_xticks(minor_ticks_x, minor=True)
ax.set_yticks(major_ticks_y)
ax.set_yticks(minor_ticks_y, minor=True)
ax.grid(which='minor', alpha=0.3)
ax.grid(which='major', alpha=0.5)
ax.set_xlabel('Destination Reached \nWith IP', fontsize=13)
plt.rc('xtick', labelsize=13)
plt.rc('ytick', labelsize=13)
plt.tight_layout()

ax= plt.subplot(fig[3])
plt.rcParams['font.family'] = "serif"
n, bins, patches = ax.hist(df_test[df_test.capture_type=="APT"].DP_dnsReqNo_Min, n_bins, range=[0, 100], density=True, histtype='step',
                           cumulative=True, label='APT',linewidth=2,color=color_apt)
df_cdf=attach_df(n,bins,df_cdf,"APT","DP_dnsReqNo_Min")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="botnet"].DP_dnsReqNo_Min, n_bins,range=[0, 100], density=True, histtype='step',
                           cumulative=True, label='botnet',linewidth=2,color=color_botnet)
df_cdf=attach_df(n,bins,df_cdf,"botnet","DP_dnsReqNo_Min")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="legitimate"].DP_dnsReqNo_Min, n_bins,range=[0, 100], density=True, histtype='step',
                           cumulative=True, label='legitimate',linewidth=2,color=color_legitimate)
df_cdf=attach_df(n,bins,df_cdf,"legitimate","DP_dnsReqNo_Min")
major_ticks_x = np.arange(0, 101, 50)
minor_ticks_x = np.arange(0, 101, 50/5)
major_ticks_y = np.arange(0, 1.1, 0.2)
minor_ticks_y = np.arange(0, 1.1, 0.05)
ax.set_xticks(major_ticks_x)
ax.set_xticks(minor_ticks_x, minor=True)
ax.set_yticks(major_ticks_y)
ax.set_yticks(minor_ticks_y, minor=True)
ax.grid(which='minor', alpha=0.3)
ax.grid(which='major', alpha=0.5)
ax.set_xlabel('Minimum Requests \nper Destination', fontsize=13)
plt.rc('xtick', labelsize=13)
plt.rc('ytick', labelsize=13)

ax= plt.subplot(fig[4])
plt.rcParams['font.family'] = "serif"
n, bins, patches = ax.hist(df_test[df_test.capture_type=="APT"].HP_MaxResumedConnections, n_bins, range=[0, 100], density=True, histtype='step',
                           cumulative=True, label='APT',linewidth=2,color=color_apt)
df_cdf=attach_df(n,bins,df_cdf,"APT","HP_MaxResumedConnections")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="botnet"].HP_MaxResumedConnections, n_bins,range=[0, 100], density=True, histtype='step',
                           cumulative=True, label='botnet',linewidth=2,color=color_botnet)
df_cdf=attach_df(n,bins,df_cdf,"botnet","HP_MaxResumedConnections")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="legitimate"].HP_MaxResumedConnections, n_bins,range=[0, 100], density=True, histtype='step',
                           cumulative=True, label='legitimate',linewidth=2,color=color_legitimate)
df_cdf=attach_df(n,bins,df_cdf,"legitimate","HP_MaxResumedConnections")
major_ticks_x = np.arange(0, 101, 50)
minor_ticks_x = np.arange(0, 101, 50/5)
major_ticks_y = np.arange(0, 1.1, 0.2)
minor_ticks_y = np.arange(0, 1.1, 0.05)
ax.set_xticks(major_ticks_x)
ax.set_xticks(minor_ticks_x, minor=True)
ax.set_yticks(major_ticks_y)
ax.set_yticks(minor_ticks_y, minor=True)
ax.grid(which='minor', alpha=0.3)
ax.grid(which='major', alpha=0.5)
ax.set_xlabel('Max Resumed \nConnection per Host', fontsize=13)
plt.rc('xtick', labelsize=13)
plt.rc('ytick', labelsize=13)
plt.tight_layout()

ax= plt.subplot(fig[5])
plt.rcParams['font.family'] = "serif"
n, bins, patches = ax.hist(df_test[df_test.capture_type=="APT"].Delta_Time_mean, n_bins, range=[0, 0.5], density=True, histtype='step',
                           cumulative=True, label='APT',linewidth=2,color=color_apt)
df_cdf=attach_df(n,bins,df_cdf,"APT","Delta_Time_mean")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="botnet"].Delta_Time_mean, n_bins,range=[0, 0.5], density=True, histtype='step',
                           cumulative=True, label='botnet',linewidth=2,color=color_botnet)
df_cdf=attach_df(n,bins,df_cdf,"botnet","Delta_Time_mean")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="legitimate"].Delta_Time_mean, n_bins,range=[0, 0.5], density=True, histtype='step',
                           cumulative=True, label='legitimate',linewidth=2,color=color_legitimate)
df_cdf=attach_df(n,bins,df_cdf,"legitimate","Delta_Time_mean")
major_ticks_x = np.arange(0, 0.51, 0.25)
minor_ticks_x = np.arange(0, 0.51, 0.25/5)
major_ticks_y = np.arange(0, 1.1, 0.2)
minor_ticks_y = np.arange(0, 1.1, 0.05)
ax.set_xticks(major_ticks_x)
ax.set_xticks(minor_ticks_x, minor=True)
ax.set_yticks(major_ticks_y)
ax.set_yticks(minor_ticks_y, minor=True)
ax.grid(which='minor', alpha=0.3)
ax.grid(which='major', alpha=0.5)
ax.set_xlabel('Mean Delta Time', fontsize=13)
plt.rc('xtick', labelsize=13)
plt.rc('ytick', labelsize=13)
plt.tight_layout()

ax= plt.subplot(fig[6])
plt.rcParams['font.family'] = "serif"
n, bins, patches = ax.hist(df_test[df_test.capture_type=="APT"].PF_tcpRatio, n_bins, range=[0, df_test.PF_tcpRatio.max()], density=True, histtype='step',
                           cumulative=True, label='APT',linewidth=2,color=color_apt)
df_cdf=attach_df(n,bins,df_cdf,"APT","PF_tcpRatio")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="botnet"].PF_tcpRatio, n_bins,range=[0, df_test.PF_tcpRatio.max()], density=True, histtype='step',
                           cumulative=True, label='botnet',linewidth=2,color=color_botnet)
df_cdf=attach_df(n,bins,df_cdf,"botnet","PF_tcpRatio")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="legitimate"].PF_tcpRatio, n_bins,range=[0, df_test.PF_tcpRatio.max()], density=True, histtype='step',
                           cumulative=True, label='legitimate',linewidth=2,color=color_legitimate)
df_cdf=attach_df(n,bins,df_cdf,"legitimate","PF_tcpRatio")
major_ticks_x = np.arange(0, 1.1, 0.5)
minor_ticks_x = np.arange(0, 1.1, 0.5/5)
major_ticks_y = np.arange(0, 1.1, 0.2)
minor_ticks_y = np.arange(0, 1.1, 0.05)
ax.set_xticks(major_ticks_x)
ax.set_xticks(minor_ticks_x, minor=True)
ax.set_yticks(major_ticks_y)
ax.set_yticks(minor_ticks_y, minor=True)
ax.grid(which='minor', alpha=0.3)
ax.grid(which='major', alpha=0.5)
ax.set_xlabel('Raw TCP Ratio', fontsize=13)
plt.rc('xtick', labelsize=13)
plt.rc('ytick', labelsize=13)

ax= plt.subplot(fig[7])
plt.rcParams['font.family'] = "serif"
n, bins, patches = ax.hist(df_test[df_test.capture_type=="APT"].PF_Max_idleTime, n_bins, range=[0,400], density=True, histtype='step',
                           cumulative=True, label='APT',linewidth=2,color=color_apt)
df_cdf=attach_df(n,bins,df_cdf,"APT","PF_Max_idleTime")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="botnet"].PF_Max_idleTime, n_bins,range=[0, 400], density=True, histtype='step',
                           cumulative=True, label='botnet',linewidth=2,color=color_botnet)
df_cdf=attach_df(n,bins,df_cdf,"botnet","PF_Max_idleTime")

n, bins, patches = ax.hist(df_test[df_test.capture_type=="legitimate"].PF_Max_idleTime, n_bins,range=[0, 400], density=True, histtype='step',
                           cumulative=True, label='legitimate',linewidth=2,color=color_legitimate)
df_cdf=attach_df(n,bins,df_cdf,"legitimate","PF_Max_idleTime")
major_ticks_x = np.arange(0, 401, 200)
minor_ticks_x = np.arange(0, 401, 200/5)
major_ticks_y = np.arange(0, 1.1, 0.2)
minor_ticks_y = np.arange(0, 1.1, 0.05)
ax.set_xticks(major_ticks_x)
ax.set_xticks(minor_ticks_x, minor=True)
ax.set_yticks(major_ticks_y)
ax.set_yticks(minor_ticks_y, minor=True)
ax.grid(which='minor', alpha=0.3)
ax.grid(which='major', alpha=0.5)
ax.set_xlabel('Maximum Idle Time', fontsize=13)
plt.rc('xtick', labelsize=13)
plt.rc('ytick', labelsize=13)
ax.legend(loc='lower right')
plt.savefig('experiments/figures/top_features_distribution.png')
plt.show()