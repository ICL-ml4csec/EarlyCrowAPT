import pandas as pd
import experiments.functions as gv
from sklearn import metrics
from sklearn.ensemble import RandomForestClassifier
import warnings
PATH = "data/contextual_summaries/"
FILE_Train='training.csv'
FILE_Test='testing.csv'

df_train=pd.read_csv(PATH+FILE_Train)
df_test=pd.read_csv(PATH+FILE_Test)

##Cleanning the labels to calculate the overall detect for each malware family
df_test['multiple_label']=df_test.multiple_label.str.replace(r"empire[0-9]","Empire")
df_test['multiple_label']=df_test.multiple_label.str.replace(r"cobaltstrike[0-9]","CobaltStrike")
df_test['multiple_label']=df_test.multiple_label.str.replace(r"onionduke[0-9]","OnionDuke")
df_test['multiple_label']=df_test.multiple_label.str.replace(r"Dridex[0-9]*","Dridex")
df_test['multiple_label']=df_test.multiple_label.str.replace(r"ImminentMonitor[0-9]","ImminentMonitor")
df_test['multiple_label']=df_test.multiple_label.str.replace(r"Ammyy[0-9]","Ammyy")
df_test['multiple_label']=df_test.multiple_label.str.replace(r"Emotet[0-9]*","Emotet")
df_test['multiple_label']=df_test.multiple_label.str.replace(r"apt_strongpity[0-9]","StrongPity")
df_test['multiple_label']=df_test.multiple_label.str.replace(r"flawedAmmy[0-9]","FlawedAmmy")

df_test['multiple_label']=df_test.multiple_label.str.replace(r"ctu_normal_[0-9]*","legitimate")

#########
all=gv.pf_col_http+gv.hp_http+gv.up_col+gv.dp_col
all_https=gv.pf_col_https+gv.hp_https+gv.dp_col_https
feature_sets_names=['EarlyCrow_HTTPS']
feature_sets = [all_https]
label = ['label']
train_features= df_train.drop(["label"],axis=1)
train_labels= df_train['label']
test_features = df_test.drop(["label"],axis=1)
test_labels = df_test['label']


train_features_fs= train_features.loc[:, all_https]
test_features_fs= test_features.loc[:, all_https]
clf = RandomForestClassifier(n_estimators=100, random_state= 0)
clf.fit(train_features_fs, train_labels)
y_pred = clf.predict(test_features_fs)


df_test_temp=df_test.copy(deep=True)

test_labels_temp=test_labels.str.replace("legitimate",'0')
test_labels_temp=test_labels_temp.str.replace("malicious",'1')
test_labels_temp=test_labels_temp.astype(int)
test_labels_temp=test_labels_temp.astype(bool)
y_pred_temp=pd.Series(y_pred)
y_pred_temp=y_pred_temp.str.replace("legitimate",'0')
y_pred_temp=y_pred_temp.str.replace("malicious",'1')
y_pred_temp=y_pred_temp.astype(int)
y_pred_temp=y_pred_temp.astype(bool)
result_xor=test_labels_temp !=y_pred_temp ## True results is the missclasification
result_xor.name='missclassified'
df_test_temp['missclassified']=result_xor
filter_leg=df_test_temp.loc[(df_test_temp.label=='legitimate') & (df_test_temp.capture_type=='APT')].index
df_test_temp=df_test_temp.drop(filter_leg)
traces=df_test_temp.multiple_label.unique()
df_detection= pd.DataFrame(columns=['Label','Undetected','Servers_Count','Detection_Rate'])
d_counter=0
for t in traces:
    df_detection.at[d_counter,'Label']=t
    df_oneTrace=df_test_temp[df_test_temp.multiple_label==t]
    df_detection.at[d_counter,'Servers_Count']=len(df_oneTrace)
    df_detection.at[d_counter,'Undetected']=len(df_oneTrace[df_oneTrace.missclassified==True])
    d_counter +=1

df_detection['Detection_Rate']=((df_detection.Servers_Count-df_detection.Undetected)/df_detection.Servers_Count)*100
print(
    "-------------------------------------------------------------")
print("\t\t\t\t\tDetection Rate Breakdown")
print(
    "-------------------------------------------------------------")
print(df_detection)




