import warnings
warnings.filterwarnings("ignore")
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import experiments.functions as gv
PATH = "./data/contextual_summaries/"
FILE_Train='training.csv'
FILE_Test='testing.csv'
df_train=pd.read_csv(PATH+FILE_Train)
df_test=pd.read_csv(PATH+FILE_Test)
df_train=df_train.reset_index(drop=True)
df_test=df_test.reset_index(drop=True)
all=gv.pf_col_http+gv.hp_http+gv.up_col+gv.dp_col
all_https=gv.pf_col_https+gv.hp_https+gv.dp_col_https
feature_sets_names=['EarlyCrow','MADE','EarlyCrow_HTTPS','MADE_https']
feature_sets = [all,gv.MADE,all_https,gv.MADE_https]
label = ['label']
train_features= df_train.drop(["label"],axis=1)
train_labels= df_train['label']
experiments=['botnet','APT','']
malware_type=['APT','botnet','Malicious']
for ex in experiments:
    df_result_summary = pd.DataFrame(
        columns=['classifier', 'TN', 'FP', 'FN', 'TP',
                 'FPR', 'Pr_macro', 'R_macro', 'Acc', 'F1',
                 'F1_macro'])
    mal_type = malware_type[experiments.index(ex)]
    test_set=df_test.copy(deep=True)
    test_set = test_set[test_set.capture_type != ex]
    test_features = test_set.drop(["label"], axis=1)
    test_labels = test_set['label']
    fs_index = 0
    for fs in feature_sets:
            print(
                "Experiment {}: Unseen {} vs. Legitimate. Classifier: {}.".format(
                    experiments.index(ex) + 1, mal_type,
                    feature_sets_names[fs_index]), end='\r')

            train_features_fs= train_features.loc[:, fs]
            test_features_fs= test_features.loc[:, fs]
            clf = RandomForestClassifier(n_estimators=100, random_state= 0)
            clf.fit(train_features_fs, train_labels)
            y_pred = clf.predict(test_features_fs)
            gv.results_summary(df_result_summary, fs_index,
                               feature_sets_names, test_labels, y_pred)
            fs_index += 1
    df_result_summary['FPR']=(df_result_summary.FP /(df_result_summary.FP +df_result_summary.TN))*100
    df_result_summary['FPR']=df_result_summary.FPR.astype(float)
    df_result_summary['FPR']=df_result_summary['FPR'].round(2)
    df_result_summary=df_result_summary.drop(columns=['TN', 'FP', 'FN', 'TP'])
    print("-------------------------------------------------------------------")
    print("\t\t\t\t\t\tUnseen {} vs. Legitimate".format(mal_type))
    print("-------------------------------------------------------------------")
    print(df_result_summary)

