import warnings
warnings.filterwarnings("ignore")
import pandas as pd
import numpy as np
import math
from sklearn import metrics
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline
from matplotlib import gridspec

PATH = "data/contextual_summaries/"
PATH_FI='experiments/functions/meta_data/'
FILE_Train='training.csv'
FILE_Test='testing.csv'
FI_EC='fi_ec.csv'
FI_EC_HTTPS='fi_ec_https.csv'
FI_BASELINE='fi_baseline.csv'
FI_BASELINE_HTTPS='fi_baseline_https.csv'
df_train=pd.read_csv(PATH+FILE_Train)
df_test=pd.read_csv(PATH+FILE_Test)
df_f1_macro = pd.DataFrame(columns=['classifier_name','classifier','Pr_macro','R_macro','Acc','F1_macro'])
df_features_diversity=df_f1_macro.copy(deep=True)
df_train=df_train.iloc[:,2:] # remove CSID, LastFlowID
df_test=df_test.iloc[:,2:] # remove CSID, LastFlowID
train_features= df_train.drop(["label"],axis=1)
train_labels= df_train['label']
test_features = df_test.drop(["label"],axis=1)
test_labels = df_test['label']
classifiers=['ec','echttps','baseline','baselinehttps']
for cs in classifiers:
    if cs =='ec':
        feature_sets_names=['ec_10pct','ec_20pct','ec_30pct','ec_40pct','ec_50pct',
                            'ec_60pct','ec_70pct','ec_80pct','ec_90pct','ec_100pct']
        df_fi = pd.read_csv(
            PATH_FI+FI_EC)

    elif cs=='echttps':
        feature_sets_names=['echttps_10pct','echttps_20pct','echttps_30pct','echttps_40pct',
                            'echttps_50pct','echttps_60pct','echttps_70pct','echttps_80pct',
                            'echttps_90pct','echttps_100pct']
        df_fi = pd.read_csv(
            PATH_FI + FI_EC_HTTPS)

    elif cs=='baseline':
        feature_sets_names=['baseline_10pct','baseline_20pct','baseline_30pct','baseline_40pct',
                            'baseline_50pct','baseline_60pct','baseline_70pct','baseline_80pct',
                            'baseline_90pct','baseline_100pct']
        df_fi = pd.read_csv(
            PATH_FI + FI_BASELINE)

    elif cs=='baselinehttps':
        feature_sets_names=['baselinehttps_10pct','baselinehttps_20pct','baselinehttps_30pct','baselinehttps_40pct',
                            'baselinehttps_50pct','baselinehttps_60pct','baselinehttps_70pct','baselinehttps_80pct',
                            'baselinehttps_90pct','baselinehttps_100pct']
        df_fi = pd.read_csv(
            PATH_FI + FI_BASELINE_HTTPS)

    fs_index = 0
    df_fi = df_fi.sort_values(by='Gain')
    df_fi = df_fi.reset_index(drop=True)
    NU_FEAUTRES = len(df_fi)
    df_fi = df_fi[:]
    df_fi = df_fi.reset_index(drop=True)
    all_10pct = df_fi.loc[:math.floor(NU_FEAUTRES * 0.1),
                'Feature'].to_list()
    all_20pct = df_fi.loc[:math.floor(NU_FEAUTRES * 0.2),
                'Feature'].to_list()
    all_30pct = df_fi.loc[:math.floor(NU_FEAUTRES * 0.3),
                'Feature'].to_list()
    all_40pct = df_fi.loc[:math.floor(NU_FEAUTRES * 0.4),
                'Feature'].to_list()
    all_50pct = df_fi.loc[:math.floor(NU_FEAUTRES * 0.5),
                'Feature'].to_list()
    all_60pct = df_fi.loc[:math.floor(NU_FEAUTRES * 0.6),
                'Feature'].to_list()
    all_70pct = df_fi.loc[:math.floor(NU_FEAUTRES * 0.7),
                'Feature'].to_list()
    all_80pct = df_fi.loc[:math.floor(NU_FEAUTRES * 0.8),
                'Feature'].to_list()
    all_90pct = df_fi.loc[:math.floor(NU_FEAUTRES * 0.9),
                'Feature'].to_list()
    all_100pct = df_fi.loc[:math.floor(NU_FEAUTRES * 1),
                 'Feature'].to_list()

    feature_sets = [all_10pct, all_20pct, all_30pct, all_40pct,
                    all_50pct, all_60pct, all_70pct, all_80pct,
                    all_90pct, all_100pct]

    for fs in feature_sets:
            train_features_fs= train_features.loc[:, fs]
            test_features_fs= test_features.loc[:, fs]

            print(feature_sets_names[fs_index], end='\r')

            clf = RandomForestClassifier(n_estimators=100, random_state= 0)
            clf.fit(train_features_fs, train_labels)
            y_pred = clf.predict(test_features_fs)
            df_f1_macro.at[fs_index,'F1_macro']=metrics.f1_score(test_labels, y_pred, average='macro')
            df_f1_macro.at[fs_index,'Pr_macro']=metrics.precision_score(test_labels, y_pred, average='macro')
            df_f1_macro.at[fs_index,'R_macro']=metrics.recall_score(test_labels, y_pred, average='macro')
            df_f1_macro.at[fs_index,'Acc']=metrics.accuracy_score(test_labels, y_pred)

            df_f1_macro.at[fs_index, 'classifier'] = feature_sets_names[fs_index]
            df_f1_macro.at[fs_index, 'classifier_name'] = cs

            fs_index += 1
    print('{} - Done.'.format(cs))
    df_features_diversity=df_features_diversity.append(df_f1_macro)


df_ec_results=df_features_diversity[df_features_diversity.classifier_name=='ec']
df_echttps_results=df_features_diversity[df_features_diversity.classifier_name=='echttps']
df_made_results=df_features_diversity[df_features_diversity.classifier_name=='baseline']
df_madehttps_results=df_features_diversity[df_features_diversity.classifier_name=='baselinehttps']

plt.figure(figsize=(8, 5))
fig = gridspec.GridSpec(2, 2)
ax= plt.subplot(fig[0])
major_ticks_x = np.arange(0, 101, 1)
minor_ticks_x = np.arange(0, 101, 0.25)

major_ticks_y = np.arange(0.45, 1.2, 0.05)
minor_ticks_y = np.arange(0.45, 1.1, 0.0125)
ax.set_xticks(major_ticks_x)
ax.set_xticks(minor_ticks_x, minor=True)
ax.set_yticks(major_ticks_y)
ax.set_yticks(minor_ticks_y, minor=True)
ax.grid(which='minor', alpha=0.3)
ax.grid(which='major', alpha=0.5)
#plt.figure(figsize=(4, 2))
df_f1_macro=df_ec_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].F1_macro
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='b', linewidth=2, linestyle='solid',label='EarlyCrow')

df_f1_macro=df_echttps_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].F1_macro
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='g', linewidth=2, linestyle='dashed',label='EarlyCrow-HTTPS')

df_f1_macro=df_made_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].F1_macro
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='r',linewidth=2, linestyle='dashdot', label='Baseline')

df_f1_macro=df_madehttps_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].F1_macro
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='m',linewidth=2, linestyle='dotted', label='Baseline-HTTPS')

plt.xticks(np.arange(10), (
    '10',
    '20',
    '30',
    '40',
    '50',
    '60',
    '70',
    '80',
    '90',
    '100',

),fontsize=10,rotation=0)
ax.set_xlabel('Features (%)', fontsize=13)
ax.set_ylabel('Macro F1-Score', fontsize=13)
plt.tight_layout()

ax= plt.subplot(fig[1])
major_ticks_x = np.arange(0, 101, 1)
minor_ticks_x = np.arange(0, 101, 0.25)
major_ticks_y = np.arange(0.40, 1.1, 0.05)
minor_ticks_y = np.arange(0.40, 1.1, 0.0125)
ax.set_xticks(major_ticks_x)
ax.set_xticks(minor_ticks_x, minor=True)
ax.set_yticks(major_ticks_y)
ax.set_yticks(minor_ticks_y, minor=True)
ax.grid(which='minor', alpha=0.3)
ax.grid(which='major', alpha=0.5)
df_f1_macro=df_ec_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].Pr_macro
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='b', linewidth=2, linestyle='solid',label='EarlyCrow')

df_f1_macro=df_echttps_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].Pr_macro
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='g', linewidth=2, linestyle='dashed',label='EarlyCrow-HTTPS')

df_f1_macro=df_made_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].Pr_macro
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='r',linewidth=2, linestyle='dashdot', label='Baseline')

df_f1_macro=df_madehttps_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].Pr_macro
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='m',linewidth=2, linestyle='dotted', label='Baseline-HTTPS')

ax.legend(loc='lower right')
plt.xticks(np.arange(10), (
    '10',
    '20',
    '30',
    '40',
    '50',
    '60',
    '70',
    '80',
    '90',
    '100',

),fontsize=10,rotation=0)

ax.set_xlabel('Features (%)', fontsize=13)
ax.set_ylabel('Precision', fontsize=13)
plt.tight_layout()

ax= plt.subplot(fig[2])
major_ticks_x = np.arange(0, 101, 1)
minor_ticks_x = np.arange(0, 101, 0.25)

major_ticks_y = np.arange(0.45, 1.1, 0.05)
minor_ticks_y = np.arange(0.45, 1.1, 0.0125)
ax.set_xticks(major_ticks_x)
ax.set_xticks(minor_ticks_x, minor=True)
ax.set_yticks(major_ticks_y)
ax.set_yticks(minor_ticks_y, minor=True)
ax.grid(which='minor', alpha=0.3)
ax.grid(which='major', alpha=0.5)
df_f1_macro=df_ec_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].R_macro
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='b', linewidth=2, linestyle='solid',label='EarlyCrow')

df_f1_macro=df_echttps_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].R_macro
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='g', linewidth=2, linestyle='dashed',label='EarlyCrow-HTTPS')

df_f1_macro=df_made_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].R_macro
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='r',linewidth=2, linestyle='dashdot', label='Baseline')

df_f1_macro=df_madehttps_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].R_macro
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='m',linewidth=2, linestyle='dotted', label='Baseline-HTTPS')

plt.xticks(np.arange(10), (
    '10',
    '20',
    '30',
    '40',
    '50',
    '60',
    '70',
    '80',
    '90',
    '100',

),fontsize=10,rotation=0)
ax.set_xlabel('Features (%)', fontsize=13)
ax.set_ylabel('Recall', fontsize=13)
plt.tight_layout()

ax= plt.subplot(fig[3])
# Major ticks every 20, minor ticks every 5
major_ticks_x = np.arange(0, 101, 1)
minor_ticks_x = np.arange(0, 101, 0.25)

major_ticks_y = np.arange(0.85, 1.1, 0.01)
minor_ticks_y = np.arange(0.85, 1.1, 0.0025)
ax.set_xticks(major_ticks_x)
ax.set_xticks(minor_ticks_x, minor=True)
ax.set_yticks(major_ticks_y)
ax.set_yticks(minor_ticks_y, minor=True)
ax.grid(which='minor', alpha=0.3)
ax.grid(which='major', alpha=0.5)
df_f1_macro=df_ec_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].Acc
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='b', linewidth=2, linestyle='solid',label='EarlyCrow')

df_f1_macro=df_echttps_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].Acc
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='g', linewidth=2, linestyle='dashed',label='EarlyCrow-HTTPS')

df_f1_macro=df_made_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].Acc
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='r',linewidth=2, linestyle='dashdot', label='Baseline')

df_f1_macro=df_madehttps_results.copy(deep=True)
x=df_f1_macro[:].index
y=df_f1_macro[:].Acc
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 100)
Y_ = X_Y_Spline(X_)
plt.plot(X_, Y_, color='m',linewidth=2, linestyle='dotted', label='Baseline-HTTPS')

plt.xticks(np.arange(10), (
    '10',
    '20',
    '30',
    '40',
    '50',
    '60',
    '70',
    '80',
    '90',
    '100',

),fontsize=10,rotation=0)

ax.set_xlabel('Features (%)', fontsize=13)
ax.set_ylabel('Accuracy', fontsize=13)
plt.tight_layout()
plt.savefig('experiments/figures/features_diversity.png')
plt.show()


